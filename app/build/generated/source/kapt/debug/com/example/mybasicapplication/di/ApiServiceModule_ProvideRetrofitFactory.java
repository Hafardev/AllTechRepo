// Generated by Dagger (https://dagger.dev).
package com.example.mybasicapplication.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.Interceptor;
import retrofit2.Retrofit;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiServiceModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final ApiServiceModule module;

  private final Provider<Map<Integer, Interceptor>> interceptorsMapProvider;

  public ApiServiceModule_ProvideRetrofitFactory(ApiServiceModule module,
      Provider<Map<Integer, Interceptor>> interceptorsMapProvider) {
    this.module = module;
    this.interceptorsMapProvider = interceptorsMapProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(module, interceptorsMapProvider.get());
  }

  public static ApiServiceModule_ProvideRetrofitFactory create(ApiServiceModule module,
      Provider<Map<Integer, Interceptor>> interceptorsMapProvider) {
    return new ApiServiceModule_ProvideRetrofitFactory(module, interceptorsMapProvider);
  }

  public static Retrofit provideRetrofit(ApiServiceModule instance,
      Map<Integer, Interceptor> interceptorsMap) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofit(interceptorsMap));
  }
}

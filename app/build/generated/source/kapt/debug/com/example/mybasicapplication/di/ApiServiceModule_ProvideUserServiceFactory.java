// Generated by Dagger (https://dagger.dev).
package com.example.mybasicapplication.di;

import com.example.data.api.UserGitApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import retrofit2.Retrofit;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiServiceModule_ProvideUserServiceFactory implements Factory<UserGitApi> {
  private final ApiServiceModule module;

  private final Provider<Retrofit> retrofitProvider;

  public ApiServiceModule_ProvideUserServiceFactory(ApiServiceModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public UserGitApi get() {
    return provideUserService(module, retrofitProvider.get());
  }

  public static ApiServiceModule_ProvideUserServiceFactory create(ApiServiceModule module,
      Provider<Retrofit> retrofitProvider) {
    return new ApiServiceModule_ProvideUserServiceFactory(module, retrofitProvider);
  }

  public static UserGitApi provideUserService(ApiServiceModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserService(retrofit));
  }
}

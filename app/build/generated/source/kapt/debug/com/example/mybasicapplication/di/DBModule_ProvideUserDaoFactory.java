// Generated by Dagger (https://dagger.dev).
package com.example.mybasicapplication.di;

import com.example.data.db.ApplicationDataBase;
import com.example.data.db.dao.UserDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DBModule_ProvideUserDaoFactory implements Factory<UserDao> {
  private final DBModule module;

  private final Provider<ApplicationDataBase> applicationDataBaseProvider;

  public DBModule_ProvideUserDaoFactory(DBModule module,
      Provider<ApplicationDataBase> applicationDataBaseProvider) {
    this.module = module;
    this.applicationDataBaseProvider = applicationDataBaseProvider;
  }

  @Override
  public UserDao get() {
    return provideUserDao(module, applicationDataBaseProvider.get());
  }

  public static DBModule_ProvideUserDaoFactory create(DBModule module,
      Provider<ApplicationDataBase> applicationDataBaseProvider) {
    return new DBModule_ProvideUserDaoFactory(module, applicationDataBaseProvider);
  }

  public static UserDao provideUserDao(DBModule instance, ApplicationDataBase applicationDataBase) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserDao(applicationDataBase));
  }
}

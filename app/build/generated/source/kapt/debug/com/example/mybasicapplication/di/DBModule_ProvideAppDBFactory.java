// Generated by Dagger (https://dagger.dev).
package com.example.mybasicapplication.di;

import android.content.Context;
import com.example.data.db.ApplicationDataBase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DBModule_ProvideAppDBFactory implements Factory<ApplicationDataBase> {
  private final DBModule module;

  private final Provider<Context> contextProvider;

  public DBModule_ProvideAppDBFactory(DBModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public ApplicationDataBase get() {
    return provideAppDB(module, contextProvider.get());
  }

  public static DBModule_ProvideAppDBFactory create(DBModule module,
      Provider<Context> contextProvider) {
    return new DBModule_ProvideAppDBFactory(module, contextProvider);
  }

  public static ApplicationDataBase provideAppDB(DBModule instance, Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideAppDB(context));
  }
}
